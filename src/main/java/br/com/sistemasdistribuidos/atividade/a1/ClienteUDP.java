package br.com.sistemasdistribuidos.atividade.a1;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import javax.swing.JOptionPane;

public class ClienteUDP extends javax.swing.JFrame {
    
    private final String ENDERECO_SERVIDOR = "localhost";
    private final int PORTA = 6789;
    private DatagramSocket socket;
    
    /**
     * Creates new form Cliente
     */
    public ClienteUDP() {
        initComponents();
        
        try {
            socket = new DatagramSocket();
        } catch (SocketException e) {
            JOptionPane.showMessageDialog(null, "Um erro impediu a inicialização da aplicação.");
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        labelTitulo = new javax.swing.JLabel();
        txtNum1 = new javax.swing.JTextField();
        txtNum2 = new javax.swing.JTextField();
        labelSinalOperacao = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboOperacao = new javax.swing.JComboBox<>();
        labelResultado = new javax.swing.JLabel();
        btnResolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        labelTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        labelTitulo.setText("Calculadora");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(31, 0, 31, 0);
        jPanel1.add(labelTitulo, gridBagConstraints);

        txtNum1.setColumns(5);
        txtNum1.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 70, 0, 0);
        jPanel1.add(txtNum1, gridBagConstraints);

        txtNum2.setColumns(5);
        txtNum2.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 70);
        jPanel1.add(txtNum2, gridBagConstraints);

        labelSinalOperacao.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelSinalOperacao.setText("+");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel1.add(labelSinalOperacao, gridBagConstraints);

        jLabel3.setLabelFor(comboOperacao);
        jLabel3.setText("Operação:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(17, 0, 17, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        comboOperacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Soma", "Subtração", "Multiplicação", "Divisão" }));
        comboOperacao.setMinimumSize(new java.awt.Dimension(110, 22));
        comboOperacao.setPreferredSize(new java.awt.Dimension(110, 22));
        comboOperacao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboOperacaoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 14, 0, 0);
        jPanel1.add(comboOperacao, gridBagConstraints);

        labelResultado.setText("O resultado da operação 0 + 0 = 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 45, 0);
        jPanel1.add(labelResultado, gridBagConstraints);

        btnResolver.setText("Resolver");
        btnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResolverActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel1.add(btnResolver, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResolverActionPerformed
        String num1 = txtNum1.getText();
        String num2 = txtNum2.getText();
        String operacao = labelSinalOperacao.getText();
        String resposta;
        
        enviarDados(num1 + " " + operacao + " " + num2);
        resposta = aguardarResposta();
        
        labelResultado.setText(resposta);
    }//GEN-LAST:event_btnResolverActionPerformed

    private void comboOperacaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboOperacaoItemStateChanged
        int operacao = comboOperacao.getSelectedIndex();
        
        switch (operacao) {
            case 0: labelSinalOperacao.setText("+"); break;
            case 1: labelSinalOperacao.setText("-"); break;
            case 2: labelSinalOperacao.setText("*"); break;
            case 3: labelSinalOperacao.setText("/"); break;
        }
    }//GEN-LAST:event_comboOperacaoItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteUDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteUDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteUDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteUDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClienteUDP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnResolver;
    private javax.swing.JComboBox<String> comboOperacao;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelResultado;
    private javax.swing.JLabel labelSinalOperacao;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JTextField txtNum1;
    private javax.swing.JTextField txtNum2;
    // End of variables declaration//GEN-END:variables

    private String aguardarResposta() {
        String resposta;
        DatagramPacket pacoteRecebido;
        
        try {
            byte[] dados = new byte[1000];
            pacoteRecebido = new DatagramPacket(dados, dados.length);
            
            // Servidor deve responder em até 1s
            socket.setSoTimeout(1000);

            socket.receive(pacoteRecebido);

            resposta = new String(pacoteRecebido.getData(), 0, pacoteRecebido.getLength());
        } catch (SocketTimeoutException timeout) {
            resposta = "Servidor indisponível.";
        } catch (IOException e) {
            resposta = "Ocorreu um erro: " + e.getMessage();
        }
        
        return resposta;
    }

    private void enviarDados(String dadosString) {
        try {
            byte[] dados = dadosString.getBytes();
            DatagramPacket pacoteEnviado = new DatagramPacket(dados, dados.length, InetAddress.getByName(ENDERECO_SERVIDOR), PORTA);
            socket.send(pacoteEnviado);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: " + e.getMessage());
        }
    }
}
